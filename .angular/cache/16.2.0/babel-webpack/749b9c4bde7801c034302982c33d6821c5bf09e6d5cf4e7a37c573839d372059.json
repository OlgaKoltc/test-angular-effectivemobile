{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivateFn(route, state) {\n    console.log('canactivate is called');\n    const {\n      url\n    } = state;\n    return this.checkLogin(url);\n  }\n  checkLogin(url) {\n    if (this.authService.isLoggedIn) {\n      return true;\n    }\n    this.authService.redirectUrl = url;\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivateFn","route","state","console","log","url","checkLogin","isLoggedIn","redirectUrl","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/a1/test-angular-effectivemobile/src/app/guards/auth.guard.ts"],"sourcesContent":["import { AuthService } from './../services/auth.service';\nimport { Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n\n} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivateFn {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivateFn(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    console.log('canactivate is called');\n    const { url } = state;\n    return this.checkLogin(url);\n  }\n  private checkLogin(url: string): boolean {\n    if (this.authService.isLoggedIn) {\n      return true;\n    }\n    this.authService.redirectUrl = url;\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n// import { Injectable } from '@angular/core';\n// import {\n//   ActivatedRouteSnapshot,\n//   CanActivate,\n//   CanDeactivate,\n//   Router,\n//   RouterStateSnapshot,\n//   UrlTree,\n// } from '@angular/router';\n// import { Observable } from 'rxjs';\n// import { AuthService } from '../services/auth.service';\n//\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthGuard implements CanActivate, CanDeactivate<unknown> {\n//   constructor(private authService: AuthService, private router: Router) {}\n//\n//   canActivate(\n//     route: ActivatedRouteSnapshot,\n//     state: RouterStateSnapshot\n//   ):\n//     | Observable<boolean | UrlTree>\n//     | Promise<boolean | UrlTree>\n//     | boolean\n//     | UrlTree {\n//     if (!this.authService.isLoggedIn()) {\n//       this.router.navigate(['login']);\n//       return false;\n//     }\n//     return true;\n//   }\n//\n//   canDeactivate(\n//     component: unknown,\n//     currentRoute: ActivatedRouteSnapshot,\n//     currentState: RouterStateSnapshot,\n//     nextState?: RouterStateSnapshot\n//   ):\n//     | Observable<boolean | UrlTree>\n//     | Promise<boolean | UrlTree>\n//     | boolean\n//     | UrlTree {\n//     if (confirm('Are you sure?')) {\n//       localStorage.removeItem('token');\n//       return true;\n//     }\n//     return false;\n//   }\n// }\n"],"mappings":";;;;AAeA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,aAAaA,CACXC,KAA6B,EAC7BC,KAA0B;IAE1BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,MAAM;MAAEC;IAAG,CAAE,GAAGH,KAAK;IACrB,OAAO,IAAI,CAACI,UAAU,CAACD,GAAG,CAAC;EAC7B;EACQC,UAAUA,CAACD,GAAW;IAC5B,IAAI,IAAI,CAACP,WAAW,CAACS,UAAU,EAAE;MAC/B,OAAO,IAAI;;IAEb,IAAI,CAACT,WAAW,CAACU,WAAW,GAAGH,GAAG;IAClC,IAAI,CAACN,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;SAlBWb,SAAS;;mBAATA,MAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATnB,MAAS;EAAAoB,OAAA,EAATpB,MAAS,CAAAqB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}