{"ast":null,"code":"var _class;\nimport { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return this.getToken() !== null;\n  }\n  login(userInfo) {\n    if (userInfo.login === 'admin' && userInfo.password === 'Admin123ADMIN') {\n      this.setToken('alksflkgsklgjslkjffksdgjnsad');\n      return of(true);\n    }\n    return throwError(() => new Error('Failed Login'));\n  }\n  logout() {\n    this.router.navigate(['login']);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","throwError","AuthService","constructor","router","setToken","token","localStorage","setItem","getToken","getItem","isLoggedIn","login","userInfo","password","Error","logout","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["/Users/a1/test-angular-effectivemobile/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { catchError, Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private router: Router) {}\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn(): boolean {\n    return this.getToken() !== null;\n  }\n\n  login(userInfo: {\n    login: string;\n    password: string;\n  }): Observable<string | boolean> {\n    if (userInfo.login === 'admin' && userInfo.password === 'Admin123ADMIN') {\n      this.setToken('alksflkgsklgjslkjffksdgjnsad');\n      return of(true);\n    }\n    return throwError(() => new Error('Failed Login'));\n  }\n\n  logout() {\n    this.router.navigate(['login']);\n  }\n}\n"],"mappings":";AAEA,SAAiCA,EAAE,EAAEC,UAAU,QAAQ,MAAM;;;AAK7D,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,QAAQA,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,QAAQ,EAAE,KAAK,IAAI;EACjC;EAEAG,KAAKA,CAACC,QAGL;IACC,IAAIA,QAAQ,CAACD,KAAK,KAAK,OAAO,IAAIC,QAAQ,CAACC,QAAQ,KAAK,eAAe,EAAE;MACvE,IAAI,CAACT,QAAQ,CAAC,8BAA8B,CAAC;MAC7C,OAAOL,EAAE,CAAC,IAAI,CAAC;;IAEjB,OAAOC,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,cAAc,CAAC,CAAC;EACpD;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;;SA5BWf,WAAW;;mBAAXA,MAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;;SAAXnB,MAAW;EAAAoB,OAAA,EAAXpB,MAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}